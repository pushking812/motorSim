Описание программного кода симуляции работы DC-мотора
Описание задачи:
Необходимо написать программу на языке Golang выполняющую симуляции работы DC-мотора при подаче на него PWM-генератором сигнала в виде меандра. Программа должна предоставлять возможность выбора параметров симуляции через аргументы командной строки или путем считывания из конфигурационного файла. Полученный результат симуляции должен выводится в один или несколько форматов отображения, путем его сохранения в файл соответствующего формата. 

При запуске программы пользователь имеет возможность задать параметры симуляции путем установки соответствующих параметров командной строки, либо, опустив один, несколько или все аргументы - использовать параметры по умолчанию из конфигурационного файла.

Результаты симуляции должны отражать изменение контроллируемых параметров мотора за время проведения симуляции. Сохранятся в виде таблиц формата CSV и графиков формата SVG.

Для задания параметров симуляции и вывода результатов доступны следующие аргументы:

`--pwm-duty`, аргумент задающий скважность сигнала PWM-генератора. Допустима установка только одного значения: от 0 до 100 (процент скважности). Значение аргумента по умолчанию: `50`

`--pwm-voltage-min`, аргумент задающий минимальное напряжение сигнала PWM-генератора. Допустима установка только одного значения: от 0 до 24. Значение аргумента по умолчанию, V: `0`. 

`--pwm-voltage-min`, аргумент задающий максимальное напряжение сигнала PWM-генератора. Допустима установка только одного значения: от 0 до 24. Значение аргумента по умолчанию, V: `5`.

`--pwm-frequency`, аргумент задающий частоту работы PWM-генератора. Допустима установка только одного значения: от 0 до 1000. Значение аргумента по умолчанию, Hz: `500`.

`--motor-config`, аргумент задает наименование набора характеристик, определяющего параметры симуляции мотора. В качестве фргумента допустимо задать только одно значение. Допустима установка только одного значения из списка: `mdc12`. Набор по умолчанию: `mdc12`. 

`--motor-mode`, аргумент задает режим работы мотора. Допустимые значения (одно): `constant` [режим постоянной скорости], `speed` [режим изменения скорости], `accelerate` [режим ускорения и замедления], reverse [режим реверса], `braking` [режим торможения], `overload` [режим перегрузки]. Значение аргумента по умолчанию: `constant`

`--env-config`, аргумент задает наименование набора характеристик, определяющего параметры окружающей среды в которых проводится симуляция. Допустимо задание только одного значения из списка: `normal` [нормальные параметры], `hotwet` [с параметрами повышенной температуры и влажности]. Значение аргумента по умолчанию: `normal`.

`--motor-sim-conf`, аргумент задает наименование набора характеристик мотора симуляция которых производится. Допустимо одно или несколько значений из списка: `speed` [среднее значение скорости за симуляцию, оборотов/сек], `voltage` [среднее значение напряжения за симуляцию, V], `current` [среднее значение силы тока за симуляцию, A], `power` [среднее значение потребляемой мощности за симуляцию, W]. Значение аргумента по умолчанию: `speed`.

`--duration`, аргумент определяет продолжительность симуляции в миллисекундах. Допустимо указание только одного значения: от `1` до `60000`. Значение аргумента по умолчанию, ms: `5000`. 

`--step`, аргумент определяет шаг симуляции в миллисекундах. Допустимо указание только одного значения: от `1` до `1000`. Значения параметра не должно превышать значения duration. Значение аргумента по умолчанию, ms: `100`.

`--output`, параметр определяет формат файла вывода. Допустимо указание только одного значения из списка: `csv`,`svg`. Значение аргумента по умолчанию: 'cvs'

Конфигурация программы
Конфигурация определяет параметры работы и формат вывода результата симулятора. Конфигурация задается из командной строки или считывается из конфигурационного файла в соответствующие структуры языка Golang при запуске программы. В случае отсутствия одного или нескольких требуемых параметров в командной строке, эти параметры загружаются из файла конфигурации. Конфигурация программы хранится в файле `config.json` в формате JSON. 
Используемые при симуляции наборы характеристик должны быть определены в файле конфигурации до запуска программы.

Набор параметров описывающих работу мотора, по умолчанию:
- Name: `dc12` [Название набора]
- Voltage: `12.0` [Номинальное напряжение, V]
- Power: `3.0` [Номинальная мощность, W]
- Current: `0.25` [Номинальный ток, A]
- StatorResistance: `48` [Статорное сопротивление, Ом]
- EMConstant: `0.02` [Электромагнитная постоянная, Вб/А]
- StatorInductance: `0.05` [Инерция ротора, кг*м^2]
- Efficiency: `0.8` [КПД]
- MaxCurrent: `0.35` [Максимальный ток. А]
- MaxSpeed: `10` [Максимальная скорость, оборотов/сек]
- TorqueConstant: `0.05` [Момент инерции, кг*м^2]
- LoadTorque: `0.1`. [Нагрузка, вращающийся объект с моментом сопротивления, Нм]

Набор параметров описывающих окружающую среду, по умолчанию:
- Name: `normal` [Название набора]
- Temperature: `25` [Температура окружающей среды, °C],
- Humidity: `50` [Влажность, %],
- Pressure: `760` [Атмосферное давление, мм рт. ст.].

Набор параметров описывающих окружающую среду:
- Name: `hotwet` [Название набора]
- Temperature: `35` [Температура окружающей среды, °C],
- Humidity: `75` [Влажность, %],
- Pressure: `760` [Атмосферное давление, мм рт. ст.].

Структура программного кода программы:
Код должен быть разбит на пакеты, в соответствии с логикой программы:
main - главный пакет, отвечающий за запуск программы и обработку параметров командной строки
config - пакет, отвечающий за парсинг конфигурационных файлов и создание объектов-конфигураций для симуляции
simulation - пакет, отвечающий за моделирование работы DC-мотора и вычисление его параметров в зависимости от сигнала PWM и условий окружающей среды
output/csvout - пакет, отвечающий за запись результатов симуляции в CSV-файл
output/svgout - пакет, отвечающий за вывод графиков в SVG-файлы.

Общие требования к программному коду
Весь код программы должен быть написан на языке Golang, используя его эффективные идиомы и паттерны. Модуль программы должен быть разбит на пакеты и функции в соответствии с логикой программы. В коде использовать структуры, методы и нтерфейсы. Не допускать дублирование кода.
Код должен быть оптимизирован. Программа должна содержать достаточный уровень комментариев.

Теперь отвечу на твои вопросы: 
1. В конфигурационном файле может хранится несколько наборов  характеристик мотора, несколько наборов окружающей среды, несколько наборов характеристик мотора симуляция которых производится.
2. Набор характеристик во время работы программы изменить нельзя.
3. В конфигурационном файле задаютя все параметры для которых возможны аргументы командной строки. В процессе разработки мы еще уточним состав этих параметров.
4. Параметры командной строки вводятся при запуске программы, например команда `main.exe --motor-config mdc12 --duration 10000 --step 100` запускает симуляцию для для мотора с характеристиками из набора `mdc12`, с временем и шагом симуляции в миллисекнудах.

Далее отвечаю на твои вопросы:
Пакет simulation будет обращаться к структурам пакета config, как минимум, для инициализации своих структур, т.к. в структуры пакета config загружается считаная из конфигурационного файла или из командной строки информация Информация об структурах этих пакетов будет чуть позже. А в пакете config - пакет simulation использоваться не будет.

Далее отвечаю на твои вопросы:
Пакет simulation не будет взаимодействовать с пакетом output непосредственно, но в пакете main после симуляции:
`// func NewSimulation(cfg *config.Config) (*simulation.Simulation, error)
s, err := simulation.NewSimulation(cfg)`
будет вывзываться функция SaveResult:
`outputHandler := csvout.Output
//func (s *AverageValues) SaveResult(out outputHandler) error
err = s.SaveResult(outputHandler)`
где outputHandler - хэндлер вывода результата симуляции, типа:
`type OutputHandler func(filename string, sim *Simulation) error`

Далее отвечаю на твои вопросы:
Структуры пакета config используются для хранеия информации считанной из конфигурационного файла или командной строки. Основной структурой пакета является следующая структура
// Структура пакет config: содержит конфигурацию программы и параметры симуляции
type Config struct {}

Далее отвечаю на твои вопросы:
Вот содержимое структур SimConfig и EnvConfig:
// Структура SimConfig пакета config: конфигурация время и шаг симуляции
type SimConfig struct {}
// Структура EnvConfig пакета config: конфигурация параметров окружающей среды, задается при запуске программы
// из файла конфигурации или командной строки в пакете main
type EnvConfig struct {}

Далее отвечаю на твои вопросы:
В пакете simulation предусмотрена функция 
`// Метод возвращает напряжение PWM-генератора в момент времени elapsed
// прошедший с начала симуляции, для вычисления напряжения использует
// напряжение, скважность и частоту генератора. Форма сигнала - меандр.
// напряжение меняется от pwm.minVoltage до pwm.maxVoltage,
// скважность pwm.pwmDuty - значение от 0 до 100,
// частота pwm.pwmFrequency - единица измерения Hz
func (pwm *pwmGenerator) signal(elapsed time.Duration) float32`
симулирующая вывод сигнала в виде меандра, пока это единственный поддерживаемый тип сигнала.


Вот пример использования метода SaveResult из другого пакета:
`// парсинг конфигурационного файла и параметров командной строки,
// получение параметров симуляции
// func parseArgs() *config.Config
cfg := parseArgs()

// Инициализация модели симуляции работы мотора
// func NewSimulation(cfg *config.Config) (*simulation.Simulation, error)
s, err := simulation.NewSimulation(cfg)
if err != nil {
	fmt.Fprintln(os.Stderr, err)
	os.Exit(1)
}

// type func(filename string, sim Simulation) error
outputHandler := csvout.Output

// func (s *AverageValues) SaveResult(out outputHandler) error
err = s.SaveResult(outputHandler)
if err != nil {
	fmt.Fprintln(os.Stderr, err)
	os.Exit(1)
}`

Мне интересно узнать, какие методы и функции предусмотрены в пакете config, и каким образом происходит их использование в других пакетах проекта.

Теперь о методах и функции пакета config:

// Основная функция пакета config выполняющая загрузку конфигурационного файла из JSON
func LoadConfig(filename string) (*Config, error) {

Дополнительные функции пакета config
func (cfg *Config) getValueByName(name string) (interface{}, error)
func (cfg *Config) GetInt(name string) (int, error)





Можно ли задать несколько конфигураций PWM-генератора в пакете config?

Что такое режим работы мотора, и какие режимы поддерживаются в пакете config?

Какие параметры мотора могут быть настроены с помощью пакета config?

Какие данные должны быть загружены из конфигурационного файла и переданы в пакет simulation?

Какие данные должны быть сохранены в CSV-файле в пакете csvout?
 
 
Какие типы данных будут использоваться в программе для представления характеристик мотора, окружающей среды и параметров симуляции?

Какие параметры будут выводиться в CSV-файл и какие графики будут создаваться в SVG-файлах?

Какие еще функциональные возможности должна иметь программа, помимо симуляции и вывода результатов в CSV- и SVG-файлах?

В пакете simulation вы моделируете работу DC-мотора. Каким образом вы определяете, какой ток будет потреблять мотор в зависимости от входного сигнала PWM? Как вы учитываете влияние окружающей среды на работу мотора?

Пакет output/csvout отвечает за запись результатов симуляции в CSV-файл. Какие именно параметры симуляции вы сохраняете в этот файл?

Пакет output/svgout генерирует SVG-графики. Какие именно графики вы создаете и какие параметры мотора они отображают?

